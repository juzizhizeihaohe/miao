
'^'
{
  10 ^ 4

  符号的意义是异或运算, 把符号两边的十进制数字转换为二进制
  1010 ^ 100

  转换完成后给每一项做对比, 对应的位置数字相同即为0, 不同就为1
  1010
  100
    = 1110

  所以初步的运算结果应为1110, 将他转换完十进制运算就完成了
  10 ^ 4 == 14

  (可以用来搜素数组里没有重复的数)
}

'~'
{
  ~10

  符号的意义是按位取反, 把符号两边的十进制数字转换为二进制
  ~00001010

  各个位置取反
    = 11110101(这个位置的数字通常为负值, 需要减1再取反)
    = 11110100
    = 10001011(首位表示负值的不需要取反)

  转换完十进制
  10001011
    = - 11

  如果求值前为正, 则结果为负, 值为负则反之
}

'&'
{
  10 & 4

  此符号为按位与, 把符号两边的十进制数字转换为二进制
  00001010 & 00000100

  把数字做对比, 相同则为对应的数字, 不同则为0
  00001010
  00000100
    = 00000000

  此处没有一项相同, 结果就为0
}

'|'
{
  10 | 4

  此符号为按位或, 把符号两边的十进制数字转换为二进制
  00001010 & 00000100

  数字一一对应, 所在位置有1的就为1
  00001010
  00000100
    = 00001110

  转换为十进制
    = 14
}

'>>'
{
  10 >> 1

  此符号为按位右移, 把符号左边的十进制数字转换为二进制
  00001010 >> 1(左边的参数, 控制移动的位数)
  
  向右移动1位
  00001010
  =0000101
  
  转换为十进制
    = 5
  
      (可以用来求出平均数, 一半)
  
  如果带入的是负值, 结果也会是负值  
  
  '>>>'
  无符号移动,不考虑符号,直接移动,结果会很大,如果移动0位,依旧可以得出很大的值,(负值的时候)
}

'<<'
{
  10 << 1

  此符号为按位右移, 把符号左边的十进制数字转换为二进制
  00001010 << 1(左边的参数, 控制移动的位数)
  
  向左移动1位
  00001010
  000010100
  
  转换为十进制
    = 20
  
      (可以用来求出这个数的倍数)
      如果带入的是负值,结果也会是负值  
}
